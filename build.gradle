plugins {
    id 'application'
    id 'eclipse'

//    id 'org.beryx.jlink' version '2.23.2' // modular
    //id 'org.beryx.runtime' version '1.12.1'  // non modular

//    id 'com.github.spotbugs' version '4.6.0'
    id 'checkstyle'

//    id 'net.saliman.properties' version '1.5.1'
    id 'com.github.ben-manes.versions' version '0.36.0'
    id 'org.ajoberstar.reckon' version '0.13.0'
    id 'org.ajoberstar.grgit' version '4.1.0'
}

import org.apache.tools.ant.filters.ReplaceTokens

mainClassName = 'sssii.jreports.JReportsTool'

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {

//    compile 'org.glassfish.jersey.core:jersey-client:3.0.0'   // namespace changed
//    compile 'org.glassfish.jersey.inject:jersey-hk2:3.0.0'
    compile 'org.glassfish.jersey.core:jersey-client:2.33'
    compile 'org.glassfish.jersey.inject:jersey-hk2:2.33'

    compile 'com.thoughtworks.xstream:xstream:1.4.15'
    compile 'commons-cli:commons-cli:1.4'

    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.14.0'
    compile 'org.apache.logging.log4j:log4j-core:2.14.0'

    testCompile 'junit:junit:4.13.1'
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'b'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

if(!project.hasProperty('reckon.scope')){
    project.ext.'reckon.scope' = 'patch'    // override default 'minor'
}

reckon {
    scopeFromProp()
    stageFromProp('dev', 'final')
}


def val = System.getenv('BUILD_NUMBER')
def bn = (val == null ? 'nohudson' : 'b' + val)
def bnn = (val == null ? '0' : val)

val = System.getenv('BUILD_ID')
def bid = (val == null ? 'undefined' : val)

val = System.getenv('USER');    // linux
if(val == null){
    val = System.getenv('USERNAME');    // linux under glassfish, windows
}
def builduser = (val == null ? 'undefined' : val)

def buildhost = InetAddress.localHost.hostName


processResources{

    filter(ReplaceTokens,
        tokens:[
            'git.commit': grgit.head().abbreviatedId,
            'git.date': grgit.head().date.toString(),
            'build.date': new java.util.Date().toString(),
            'version': project.version.toString(),
            'hudson.build.number': bn,
            'hudson.build.id': bid,
            'build.host': builduser + '@' + buildhost
            ])
}

checkstyle {
    // TODO: why it worked with v1.0.7? gradle prior to 4.1?
    toolVersion = '5.9'    // TODO in gradle 3.5 updated to 6.19, seems new checkstyle.xml needed; 4.1 seems still says 6.19
    ignoreFailures = true
    sourceSets = [ project.sourceSets.main ]
}
/*
findbugs {
    ignoreFailures = true
    sourceSets = [ project.sourceSets.main ]
    excludeFilter = file("$projectDir/config/findbugs/excludeFilter.xml")
}
*/
test {
    // do not perform unit tests
    exclude 'sssii/jreports/**'
}
